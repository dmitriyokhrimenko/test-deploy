name: Development

on: workflow_dispatch

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm install and test
        run: |
          npm install
        env:
          CI: true

  build:
    name: CD part
    runs-on: ubuntu-latest

    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Push image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo ${{ secrets.DEV_ENV_VARS }} | base64 -d > env.txt
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get login key
        id: get-ecr-login-key
        run: |
          echo "::set-output name=key::$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})"

      # Connect via ssh to remote server and run docker
      - name: Connect to remote instance and run the app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

        uses: appleboy/ssh-action@master
        with:
         host: ${{ secrets.DEV_HOST }}
         username: ${{ secrets.DEV_SSH_USER }}
         key: ${{ secrets.DEV_SSH_KEY }}
         port: ${{ secrets.DEV_SSH_PORT }}
         script: |
           docker stop $(docker ps -a -q --filter="name=${{ secrets.APP_NAME }}") && docker rm $(docker ps -a -q --filter="name=${{ secrets.APP_NAME }}")
           docker login -u AWS -p ${{ steps.get-ecr-login-key.outputs.key }} https://${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
           docker run -p ${{ secrets.APP_PORT }}:3000 --name ${{ secrets.APP_NAME }} -d $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy:
#     needs: [test]
#     runs-on: ubuntu-latest

#     steps:
#     - name: SSH and deploy node app
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.SSH_HOST }}
#         username: ${{ secrets.SSH_USERNAME }}
#         key: ${{ secrets.SSH_KEY }}
#         port: ${{ secrets.SSH_PORT }}
#         script: |
#           cd ~/node-github-demo
#           git pull origin master
#           npm install --production
#           pm2 restart node-app
